_blurb: Complete [[7GUIs: A GUI Programming Benchmark]] implementation using the [[Sinuous]] [[UI]] library
author: [[Adam Sherwood]]
created: 20210517185452953
demo: https://thesherwood.github.io/7_GUIs/sinuous/dist/index.html https://codesandbox.io/s/github/theSherwood/7_GUIs/tree/master/sinuous
github: https://github.com/theSherwood/7_GUIs/tree/master/sinuous
modified: 20210521205804833
tags: 2020 7GUIs Sinuous Project JavaScript UI
title: 7GUIs / Sinuous
type: text/vnd.tiddlywiki

!! [[Description]]

Complete [[7GUIs: A GUI Programming Benchmark]] implementation using the [[Sinuous]] [[UI]] library.

!! [[Demo]]

<<codesandbox "https://codesandbox.io/embed/github/theSherwood/7_GUIs/tree/master/sinuous">>

!! [[Tech Stack]]

* [[JavaScript]]
* [[Sinuous]]

!! [[Overview]]

One of my [[7GUIs Implementations]].

This is one of my first [[7GUIs Implementations]] and there is a lot I would probably do differently now. However, it was a good opportunity to get more familiar with [[Sinuous]].

!! [[Smooth Sailing]]

[[Sinuous]]' implementation of the [[Observer Pattern]] is one of the most enjoyable I have used. Creating observables, computeds, and subscriptions is very simple and intuitive.

Defining an observable:

```javascript
let state = o(0);
```

Reading from an observable is as simple as calling it without arguments:

```javascript
state();
```

Setting an observable's value is as simple as calling it with the new value:

```javascript
state(1);
```

Effects are triggered through subscriptions which, given a thunk, automatically detect dereferenced observables:

```javascript
subscribe(() => console.log(state()));
```

Computeds are similarly defined:

```javascript
let incrementedState = computed(() => 1 + state());
```

This [[State Management]] system is dead simple to use and unlike [[React Hooks]] can be used freely inside and outside of components. [[Sinuous]]' rendering system simply detects the observables and computeds and creates bindings between them and the DOM.

As a result, components do not form a reactive boundary. It is much finer-grained than that, with updates getting applied directly to the DOM rather than causing a component to rerender. Performance is therefore, very good. Though it does require a different way of thinking if you are coming from [[React]].

!! [[Pain Points]]

!!! [[Syntax]]

The [[htm]]-like syntax leaves something to be desired. I was surprised how many funky bugs I ran into just by forgetting a character, (mistakes that would have been caught more easily with a system not based on parsing strings at runtime). [[Sinuous]] is very configurable and supports using [[HyperScript]] or [[JSX]] instead, which could help to avoid some issues. But I don't love either of those options, to be frank. [[HyperScript]] is not as readable and [[JSX]] requires a build system while being nearly as ugly as [[htm]].

See [[7GUIs / Sinuous with Webscript]] to see my preferred syntax options at work.

!!! Nested Observables

In the spreadsheet/cells task, I ended up using some nested observables. This was not as awkward as I thought it would be and led to a performant implementation, but it felt a little dirty.

!!! Observable Updates Do Not Check For Equality

[[Sinuous]] observables update regardless of whether the new value they received is equal to the previous value. I found myself wishing that the default behavior were the opposite, that equal values would not cause subscriptions to fire. That would make [[Sinuous]] slightly more data-oriented, which would suit me. This would not be terribly difficult to address with a library that wraps [[Sinuous]].

!! [[Lessons Learned]]

Attempting to abstract over the DOM with something that treats the render as a pure function may not, in fact, make code simpler in the way [[React]] claims. The DOM is inherently stateful and trying to avoid dealing with that seems to lead to some impedence mismatches that can be avoided with a library like [[Sinuous]] that treats the DOM like what it is while providing means to handle stateful updates in a convenient way.
