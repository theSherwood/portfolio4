_blurb: The ReconJS Site is a gamified, adversarial demo of [[ReconJS]].
author: [[Adam Sherwood]]
created: 20210423011414633
github: https://github.com/theSherwood/reconjs-site
modified: 20210521210013597
tags: Project 2019 [[Web App]] JavaScript React NextJS
title: ReconJS Site
type: text/vnd.tiddlywiki
website: https://reconjs-site.thesherwood.vercel.app/

!! [[Description]]

The ReconJS Site is a gamified, adversarial demo of [[ReconJS]]. The purpose is two-fold:

# Give developers an easy way to experiment with [[ReconJS]]’ capabilities
# Test [[ReconJS]] against developers trying to break it, and obtain the code responsible for successful breaches

The gamification of testing my security software seemed like a fun idea. So the UI of the site is reminiscent of arcade games. Those who attempt the game must change the value of window.target in order to beat the game and add their names to the highscores.

!! [[Tech Stack]]

* [[React]] - UI framework
* [[NextJS]] - [[SSR]]
* [[Express]] - routing
* [[NodeJS]] - lambdas
* [[Mongoose]] - ODM
* [[MongoDB]] - database
* [[Now]] - serverless deployment

!! [[Overview]]

The goal was to gamify improving my [[ReconJS]] security package by creating a convenient way for other developers to try to beat it. Integrating my own little library into an app (even just a simple demo app) was a lot of fun.

!! [[Smooth Sailing]]

Most of these technologies I had used before. So it wasn’t tremendously difficult. The only exception is [[NextJS]] for [[SSR]]. That was new, but on the whole really enjoyable. Next actually reduces the amount of boilerplate that a typical [[React]] application would require. The built-in scoped [[CSS]] system of [[NextJS]] is also eminently sensible. After using scoped [[CSS]] with [[NextJS]] and with [[Svelte3|Svelte]] (on another project) I’m starting to think that scoped [[CSS]] is the way to go.

!! [[Pain Points]]

!!! [[SSR]] and [[CodeMirror]]
        This one was a bit tricky. I used react-codemirror2 in this website, and it kept throwing errors when rendered server-side. I searched for a solution but ultimately decided simply to prevent it rendering server-side. After that, I discovered some information about server-side rendering [[CodeMirror]] in the [[CodeMirror]] docs. I have yet to update the site, however.

!!! @zeit/next-css
        [[NextJS]] has a nasty little bug when it comes to external stylesheets, which I needed for the [[CodeMirror]] editor. They throw import errors. I found a little hack in which you import and empty stylesheet into the `_app.js` page. For some reason this works. I have no idea why, which bothers me, but this is a known bug that’s got a lot of folks looking for a solution already.

!!! Database Security
        The backend API is public. So the question arose, how do I keep the database from getting overrun by pranksters/hackers. I did a lot of research, but ultimately settled on a dead simply solution. I’m only going to be able to digest at most a handful of successful breaches of [[ReconJS]] in a day. So I simply put a global rate limit on writing to the database. And there is no RESTful endpoint for GET requests other than the one for the list of ‘highscores’. So the amount of damage a determined hacker could do seems minimal, to say the least.

!! [[Lessons Learned]]

!!! [[Scoped Styles]]
        [[Scoped Styles]] are wonderful. It makes styling components a breeze and still provides an easy way to override interior element styling from outside without dialing up [[CSS]] specificity to an insane degree. Also, it’s just writing css, which feels a lot nicer than [[CSS-in-JS]]. I would like to see an atomic design system that used scoped [[CSS]]. I’m curious whether that would be more convenient than some of the other alternatives.

!!! [[SSR]]
        [[SSR]] with [[NextJS]] is a better dev experience than [[SPA]] with [[Create React App]], for example. And if [[SEO]] and performance are also improved, so much the better! Next time I need to do something in [[React]], I’m headed straight to [[NextJS]]. The folks behind [[NextJS]] have done an extraordinary job. Other than a bug or two, the dev experience is grand.

!! [[TODO]]

Consider a freeform section where developers can play with configuring [[ReconJS]] itself, rather than simply trying to beat it. Though this may belong in another demo. I’m not sure. This website feels adequate to its purpose.